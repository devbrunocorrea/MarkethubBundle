<?php

declare(strict_types=1);

/*
 * This file is part of gpupo/MarketBundle created by Gilmar Pupo <contact@gpupo.com>
 * For the information of copyright and license you should read the file LICENSE which is
 * distributed with this source code. For more information, see <https://opensource.gpupo.com/>
 */

namespace Gpupo\MarkethubBundle\Console\Command\Setup;

use Gpupo\Common\Tools\Inspect;
use Gpupo\MarkethubBundle\Console\Command\AbstractCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Finder\Finder;

final class GenerateSymfonyConfigCommand extends AbstractCommand
{
    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName(self::prefix.'setup:generate-symfony-config')
            ->setDescription('Generate a Symfony config');
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $finder = new Finder();
        $finder->files()
            ->in('./vendor/gpupo/*sdk/src/')
            ->exclude('Setup')
            ->name('*Command.php')
            ->notName('*Abstract*');
        $inspect = new Inspect();

        $serviceXml = file_get_contents(__DIR__.'/template/service.xml');
        $mainXml = trim(file_get_contents(__DIR__.'/template/main.xml'));

        $string = '';

        foreach ($finder as $file) {
            $class = $inspect->getClassFullNameFromFile($file->getRealPath());
            $command = new $class();
            $exploded = explode(':', $command->getName());
            $id = implode('.', $exploded);
            $string .= sprintf($serviceXml, $command->getName(), $class, $command->getDescription(), $id, $class, $exploded[1]);
        }

        $xmlContent = sprintf($mainXml, (new \DateTime())->format('Y-m-d H:i:s'), $string);

        $xmlFile = 'src/Bridge/Symfony/Bundle/Resources/config/autogenerated.commands.xml';
        $fp = fopen($xmlFile, 'w');
        fwrite($fp, $xmlContent);
        fclose($fp);

        $output->writeln(sprintf('File <bg=green;fg=black> %s </> generated!', $xmlFile));
    }
}
